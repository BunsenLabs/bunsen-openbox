#!/bin/sh
# postinst script for bunsen-openbox

#Summary of ways this script can be called:
#    postinst configure most-recently-configured-version(null if not upgrade)
#    old-postinst abort-upgrade new-version
#    conflictor's-postinst abort-remove in-favour package new-version
#    deconfigured's-postinst abort-deconfigure in-favour failed-install-package version removing conflicting-package version

set -e

this_package=$DPKG_MAINTSCRIPT_PACKAGE

# file suffixes
ours=.bunsen
theirs=.bunsen-orig

# the package whose behaviour this package is modifying
file_package=openbox

# one file per line: files in /usr/lib whose path depends on system architecture
# (path after multiarch tuple)
# It is assumed that no such filepaths contain linebreaks.
libfiles='openbox-autostart'

# get full path from post-tuple section
get_libpath() {
    local libfile libpath
    libfile=$1
    libpath=$(dpkg -L "$file_package" | grep "^/usr/lib/[^/]\+/${libfile}\$") || {
        echo "$libfile not listed under /usr/lib by $file_package" >&2
        exit 1
    }
    [ -f "$libpath" ] || {
        echo "$libpath is not a file" >&2
        exit 1
    }
    printf '%s' "$libpath"
}

# generate modified version of file as file${ours} in same directory
# (ie file.bunsen)
make_ourfile() {
    local file ourfile template
    file=$1
    ourfile=${file}${ours}
    # use $file_package's original file, even if already diverted
    template="$(dpkg-divert --truename "$file")"
    case "$(basename "$file")" in
    openbox-autostart)
        comment_string='^test -z $BG || $BG -solid "#303030"$'
        sed "/${comment_string}/ s/^/#/" "$template" > "$ourfile"
        [ -s "$ourfile" ] || {
            echo "failed to generate non-zero $ourfile" >&2
            exit 1
        }
        chmod +x "$ourfile"
    ;;
    *)
        echo "Cannot handle file $file" >&2
        exit 1
    ;;
    esac
}

# divert file to file.bunsen-orig
displace() {
    local file theirfile diverted_file diverter
    file=$1
    theirfile=${file}${theirs}
    diverted_file="$(dpkg-divert --truename "$file")"
    diverter="$(dpkg-divert --listpackage "$file")"
    case "$diverter" in
    "$this_package")
        [ "$diverted_file" = "$theirfile" ] || {
            dpkg-divert --remove --rename --package "$this_package" "$file"
            dpkg-divert --add --rename --package "$this_package" --divert "$theirfile" "$file"
        }
        ;;
    '')
        dpkg-divert --add --rename --package "$this_package" --divert "$theirfile" "$file"
        ;;
    *)
        echo "$file is already diverted to $diverted_file by $diverter" >&2
        exit 1
        ;;
    esac
}

# make file a link to file.bunsen
make_link() {
    local file ourfile
    file=$1
    ourfile=${file}${ours}
    [ -e "$file" ] || ln -s "$(basename "$ourfile")" "$file"
    [ "$(readlink "$file")" = "$(basename "$ourfile")" ] || {
        echo "$file is not a symlink to $(basename "$ourfile")" >&2
        exit 1
    }
}

case "$1" in
    configure|abort-remove)
        while read -r libfile
        do
            filepath=$(get_libpath "$libfile")
            make_ourfile "$filepath"
            displace "$filepath"
            make_link "$filepath"
        done <<EOF
$libfiles
EOF
    ;;

    abort-upgrade|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument '$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#
